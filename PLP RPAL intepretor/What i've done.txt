{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 The purpose of this project is to create an interpreter of RPAL, which is a functional language.\
\
The example source code for RPAL: \
Print (\
        PP ('program',\
	    'p01.t',\
	     nil aug 'dclns',\
             ('block',\
		   ('output', 'read')\
             ),\
	    'p01.t'\
\
	   ) (nil aug 3)\
      )\
// output: (3)\
\
The processing flow:\
\
source code \'97> scanner \'97> create AST \'97> Standardize \'97> Create control signal \'97> CSE machine \'97> output result\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\'95	}scanner: The input is raw source code, just a text file of RPAL program.  The output is tokens. What we do here is to convert a sequence of characters into s sequence of tokens, meaningful character strings, by taking lexical grammar into account.\
{\listtext	\'95	}AST:  Abstract syntax tree.  Here we convert a sequence of tokens into a tree structure to represent the source code.\
{\listtext	\'95	}Standardize: We further process the AST into a standardized form. It is still a tree.\
{\listtext	\'95	}Control signal: By traversing Standardized tree structure, we could create control signals. These control signal will be feed into next stage, CSE machine, to get the final result.\
{\listtext	\'95	}CSE: control, stack, environment machine. This is an mechanism to systematically evaluate RPAL programs. Remember, the program here has been processed into control structures. The output is the result of program.\
}